/**
 *
 *
 */

'use strict';

var PATH = require('path');
var FS = require('fs');
var UTIL = require('bjs-util');
var JSONNICE = require('json-nice');
var CWD = process.cwd();

// load all lib
var
	// 流程：记录所有文件最后更新时间
	STEPRecord = require(PATH.join(__dirname, 'bjs-cmd-command/flow-record/task.js')),
	// 流程：复制变动的文件
	STEPCopy = require(PATH.join(__dirname, 'bjs-cmd-command/flow-copy/task.js')),
	// 流程：过滤smarty的tpl文件，重新部署
	STEPFilter = require(PATH.join(__dirname, 'bjs-cmd-command/flow-filter/task.js')),
	// 流程：解析CMD编译方式的配置文件
	STEPCMDconf = require(PATH.join(__dirname, 'bjs-cmd-command/cmd.conf.js')),
	// 流程：合并css文件
	STEPCSSImport = require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-import/task.js')),
	// 流程：压缩css文件
	STEPCSSMinify = require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-minify/task.js')),
	// 流程：transport
	STEPTransport = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-transport/task.js')),
	// 流程：uglify
	STEPUglify = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-uglify/task.js')),
	// 流程：版本号
	STEPVersion = require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'));



/**
 *
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 */
function watchChokidar(conf) {
	// 需要忽略几种类型的文件：
	// 1、以.开头的隐藏文件
	// 2、bjs.conf.js文件
	// 3、bjs项目记录的相关文件夹 _bjs_

	require(PATH.join(__dirname, 'bjs-watch/lib/watch.js'))(CWD, function(type, path) {
		// 先将路径配置为grunt.file接收的数据格式
		var _cwd = PATH.join(CWD, conf.src); // 模块源路径
		var _dst = PATH.join(CWD, conf.dst); // 模块部署路径
		var dest = PATH.join(CWD, conf.dist); // 项目文件部署路径

		// 总共步骤
		var ret, STEP1, STEP2, STEP3, STEP4, STEP5, STEP6, STEP7, STEP8_1, STEP8_2, STEP9;

		// 预处理：过滤错误的监听
		if (type === 400) {
			return;
		}


		// =========================================================================
		// 删除的处理流程
		// 
		// 
		// 文件夹或文件的删除处理
		if (type === 302 || type === 301) {
			// log
			UTIL.log();

			// 1、文件最后更新时间的记录，同时删除目标文件
			STEP1 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-record/task.js'));
			var ret = STEP1({
				files: [{
					src: path
				}]
			}, {
				output: PATH.join(CWD, '_bjs_/mtime.json'),
				src: path,
				dest: PATH.join(dest, PATH.relative(CWD, path)),
				rm: true
			});

			UTIL.logc();
			// 2、无需copy

			// 3、插件处理
			var file;
			if (conf.plugins && conf.plugins.length > 0) {
				conf.plugins.forEach(function(item) {
					STEP3 = require(PATH.join(__dirname, 'bjs-cmd-command/plugins', item.lib));
					if (item.pattern.test(path)) {
						file = {
							expand: true,
							cwd: _cwd,
							src: PATH.relative(_cwd, path),
							dest: _dst
						};
						var _options = item.options ? (typeof item.options === 'function' ? item.options(file) : item.options) : {};
						_options.rm = true;
						STEP3({
							files: [file]
						}, _options);
					}
				});
			}

			UTIL.logc();

			// 4、cssImport  TODO

			// 5、smarty
			if (conf.smarty && /\.tpl$/.test(path)) {
				STEP5 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-filter/task.js'));
				STEP5({
					files: [{
						expand: true,
						cwd: _cwd,
						src: PATH.relative(_cwd, path),
						dest: PATH.join(CWD, conf.view)
					}]
				}, {
					pattern: /view\/[^\/]*\.tpl/,
					dest: PATH.join(CWD, conf.view),
					rm: true
				})
			}

			UTIL.logc();

			// 6、delete css.js
			if (/\.css$/.test(path)) {
				try {
					FS.unlinkSync(PATH.join(dest, PATH.relative(CWD, path) + '.js'));
				} catch (e) {}
			}

			UTIL.log(true);
			return;
		}



		// 新增或修改文件，只处理单文件，不处理文件夹
		if (!FS.statSync(path).isFile()) {
			return;
		}


		// =========================================================================
		// 新增与编辑的处理流程
		// 
		// 
		// step 1: 更新文件列表的最后修改时间，确保不是由chokidar开启监听时产生的变更
		STEP1 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-record/task.js'));
		ret = STEP1({
			files: [{
				src: path
			}]
		}, {
			// 参数对应的是flow-record提供的需要处理的配置参数，参看flow-record/lib/all.js
			output: PATH.join(CWD, '_bjs_/mtime.json'),
			src: path,
			dest: PATH.join(dest, PATH.relative(CWD, path))
		});


		// 如果文件无变更，则不做任何操作
		if (!ret) {
			return;
		}

		// log
		UTIL.log();
		// step 2: copy
		if (!(conf.smarty && /\.tpl$/.test(path))) { // 除去tpl的copy
			STEP2 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-copy/task.js'));
			ret = STEP2({
				files: [{
					expand: true,
					cwd: CWD,
					src: PATH.relative(CWD, path),
					dest: dest
				}]
			});
		}

		// 如果文件处于锁状态，是无法读取copy的，此时暂时退出
		if (!ret) {
			UTIL.log(true);
			return;
		};


		// 针对第三方库文件，选择性不做后续编译
		if ((typeof conf.ignore === 'object' && conf.ignore.test(path.replace(/\\|\\\\/g, '/'))) || (typeof conf.ignore === 'string' && path.replace(/\\|\\\\/g, '/').indexOf(PATH.join(CWD, conf.ignore).replace(/\\|\\\\/g, '/'))) > -1) {
			UTIL.log(true);
			return;
		}


		UTIL.logc();


		// step 3: plugins actions
		var file;
		if (conf.plugins && conf.plugins.length > 0) {
			conf.plugins.forEach(function(item) {
				STEP3 = require(PATH.join(__dirname, 'bjs-cmd-command/plugins', item.lib));
				if (item.pattern.test(path)) {
					file = {
						expand: true,
						cwd: _cwd,
						src: PATH.relative(_cwd, path),
						dest: _dst
					};
					var ret = STEP3({
						files: [file]
					}, item.options ? (typeof item.options === 'function' ? item.options(file) : item.options) : {});
					// 只有影响到的文件需要作二次处理
					if (ret && ret instanceof Array) {
						var CMDConf = require(PATH.join(__dirname, 'bjs-cmd-command/cmd.conf.js'))(PATH.join(CWD, conf.conf));
						ret.forEach(function(f) {
							// css
							if (/\.css$/.test(f)) {
								// minify
								conf.cssMinify ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-minify/task.js'))({
									files: [{
										expand: true,
										cwd: _dst,
										src: PATH.relative(_dst, f),
										dest: _dst
									}]
								}) : null;
							}
							// if use version
							if (conf.version) {
								require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'))({
									files: [{
										expand: true,
										cwd: dest,
										src: PATH.relative(dest, f),
										dest: dest
									}]
								}, {
									base: dest,
									mbase: _dst, // module base
									view: PATH.join(CWD, conf.view),
									ignore: CMDConf.seajs.ignore
								});
								clearVersion(conf, PATH.dirname(PATH.join(dest, PATH.relative(dest, f))))
							}
						});
					}
				}
			});
		}


		UTIL.logc();


		// step 4: filter
		if (conf.smarty && /\.tpl$/.test(path)) {
			STEP4 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-filter/task.js'));
			STEP4({
				files: [{
					expand: true,
					cwd: _cwd,
					src: PATH.relative(_cwd, path),
					dest: PATH.join(CWD, conf.view)
				}]
			}, {
				pattern: /view\/[^\/]*\.tpl/,
				dest: PATH.join(CWD, conf.view)
			})
		}


		UTIL.logc();


		// step 5: css import, from dest to dest 
		if (conf.cssImport && /\.css$/.test(path)) {
			STEP5 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-import/task.js'));
			ret = STEP5({
				files: [{
					expand: true,
					cwd: CWD,
					src: PATH.relative(CWD, path),
					dest: dest
				}]
			}, {
				output: PATH.join(CWD, '_bjs_/css-deps.json'),
				dest: dest
			});

			// 针对cssImport影响到的深依赖文件进行二次合并压缩
			if (ret.length > 0) {
				var CMDConf = require(PATH.join(__dirname, 'bjs-cmd-command/cmd.conf.js'))(PATH.join(CWD, conf.conf));
				ret.forEach(function(f) {
					// transport
					require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-transport/task.js'))({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, f),
							dest: _dst
						}]
					}, {
						alias: CMDConf.seajs.alias, // TODO
						base: _dst
					}, {
						'.js': 1,
						'.css': 1
					});
					// minify
					conf.cssMinify ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-minify/task.js'))({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, f),
							dest: _dst
						}]
					}) : null;
					// uglify
					conf.uglify ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-uglify/task.js'))({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, f + '.js'),
							dest: _dst
						}]
					}, {
						base: _dst,
						ignore: CMDConf.seajs.ignore
					}) : null;
					// with version
					conf.version ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'))({
						files: [{
							expand: true,
							cwd: dest,
							src: PATH.relative(CWD, f),
							dest: dest
						}]
					}, {
						base: dest,
						mbase: _dst, // module base
						view: PATH.join(CWD, conf.view),
						ignore: CMDConf.seajs.ignore
					}) && clearVersion(conf, PATH.dirname(PATH.join(dest, PATH.relative(CWD, f)))) : null;
				});
			}
		}


		UTIL.logc();


		// step 6: tansport
		var CMDConf = require(PATH.join(__dirname, 'bjs-cmd-command/cmd.conf.js'))(PATH.join(CWD, conf.conf));
		if (/\.(js|css)$/.test(path)) {
			STEP6 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-transport/task.js'));
			STEP6({
				files: [{
					expand: true,
					cwd: _dst,
					src: PATH.relative(_cwd, path),
					dest: _dst
				}]
			}, {
				alias: CMDConf.seajs.alias, // TODO
				base: _dst
			}, {
				'.js': 1,
				'.css': 1
			})
		}


		UTIL.logc();


		// step 7: css minify, from dest to dest 
		if (conf.cssMinify && /\.css$/.test(path)) {
			STEP7 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-minify/task.js'));
			STEP7({
				files: [{
					expand: true,
					cwd: _dst,
					src: PATH.relative(_cwd, path),
					dest: _dst
				}]
			})
		}


		UTIL.logc();


		// step 8: uglify
		if (conf.uglify && /\.(js|css)$/.test(path)) {
			STEP8_1 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-deps/task.js'));
			// 先查找深依赖
			var list = STEP8_1({
				files: [{
					expand: true,
					cwd: _dst,
					src: PATH.relative(_cwd, (/\.css/.test(path) ? path + '.js' : path)),
					dest: _dst
				}]
			}, {
				output: PATH.join(CWD, '_bjs_/js-map.json'),
				base: _dst,
				dest: _dst,
				ignore: CMDConf.seajs.ignore // TODO
			});
			// 再根据深依赖影响的模块一一处理 
			if (list && list.length > 0) {
				STEP8_2 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-uglify/task.js'));
				list.forEach(function(file) {
					STEP8_2({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, file),
							dest: _dst
						}]
					}, {
						base: _dst,
						ignore: CMDConf.seajs.ignore
					});
				})
			}
		}


		UTIL.logc();


		// step 9: version
		if (conf.version) {
			// 执行
			STEP9 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'));
			STEP9({
				files: [{
					expand: true,
					cwd: dest,
					src: PATH.relative(CWD, path),
					dest: dest
				}]
			}, {
				base: dest,
				mbase: _dst, // module base
				view: PATH.join(CWD, conf.view)
			});

			// 清除可能存在的旧版本
			clearVersion(conf, PATH.dirname(PATH.join(dest, PATH.relative(CWD, path))));
		}


		UTIL.log(true);

	}, /[\/\\]\.|(bjs\.conf\.js)|_bjs_/);
}



/**
 * /
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 *
 * @description
 * 对整个项目进行版本更新，具体到有变动的文件
 */
function buildVersion(conf) {
	// 清除缓存，再重新生成
	var src = PATH.join(CWD, '_bjs_');
	var ll = FS.readdirSync(src);
	ll.forEach(function(file) {
		FS.unlinkSync(PATH.join(src, file));
	});

	conf.version = true;

	watchChokidar(conf);
}



/**
 * /
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 * @description
 * 清除旧版本的文件，只保留最新版本
 */
var clearV = require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/lib/clear.js'));

function clearVersion(conf, dest) {
	// 如果有dest，则直接处理提供的文件夹，否则处理整个项目
	if (dest) {
		clearV(dest);
	} else {
		clearV(PATH.join(CWD, conf.dst));
	}
}


module.exports = {
	watchChokidar: watchChokidar,
	buildVersion: buildVersion,
	clearVersion: clearVersion
}