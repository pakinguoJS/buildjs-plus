/**
 *
 *
 */

'use strict';

var PATH = require('path');
var FS = require('fs');
var UTIL = require('bjs-util');
var JSONNICE = require('json-nice');
var CWD = process.cwd();

var watcher = require(PATH.join(__dirname, 'bjs-watch/lib/watch.js'));


/**
 *
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 */
function watchChokidar(conf) {
	// 需要忽略几种类型的文件：
	// 1、以.开头的隐藏文件
	// 2、bjs.conf.js文件
	// 3、bjs项目记录的相关文件夹 _bjs_

	watcher.watchA(CWD, function(type, path) {
		// 先将路径配置为grunt.file接收的数据格式
		var _cwd = PATH.join(CWD, conf.src); // 模块源路径
		var _dst = PATH.join(CWD, conf.dst); // 模块部署路径
		var dest = PATH.join(CWD, conf.dest); // 项目文件部署路径

		// 总共步骤
		var ret, STEP1, STEP2, STEP3, STEP4, STEP5, STEP6, STEP7, STEP8_1, STEP8_2, STEP9;

		// 预处理：过滤错误的监听
		if (type === 400) {
			return;
		}


		// =========================================================================
		// 删除的处理流程
		// 
		// 
		// 文件夹或文件的删除处理
		if (type === 302 || type === 301) {
			// log
			UTIL.log();

			// 1、文件最后更新时间的记录，同时删除目标文件
			STEP1 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-record/task.js'));
			var ret = STEP1({
				files: [{
					src: path
				}]
			}, {
				output: PATH.join(CWD, '_bjs_/mtime.json'),
				src: path,
				dest: PATH.join(dest, PATH.relative(CWD, path)),
				rm: true
			});

			// 2、无需copy

			// 3、插件处理
			var file;
			if (conf.plugins && conf.plugins.length > 0) {
				conf.plugins.forEach(function(item) {
					STEP3 = require(PATH.join(__dirname, 'bjs-cmd-command/plugins', item.lib));
					if (item.pattern.test(path)) {
						file = {
							expand: true,
							cwd: _cwd,
							src: PATH.relative(_cwd, path),
							dest: _dst
						};
						var _options = item.options ? (typeof item.options === 'function' ? item.options(file) : item.options) : {};
						_options.rm = true;
						STEP3({
							files: [file]
						}, _options);
					}
				});
			}

			// 4、cssImport  TODO

			// 5、smarty
			if (conf.smarty && /\.tpl$/.test(path)) {
				STEP5 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-filter/task.js'));
				STEP5({
					files: [{
						expand: true,
						cwd: _cwd,
						src: PATH.relative(_cwd, path),
						dest: PATH.join(CWD, conf.view)
					}]
				}, {
					pattern: /view\/[^\/]*\.tpl/,
					dest: PATH.join(CWD, conf.view),
					rm: true
				})
			}

			// 6、delete css.js
			if (/\.css$/.test(path)) {
				try {
					FS.unlinkSync(PATH.join(dest, PATH.relative(CWD, path) + '.js'));
				} catch (e) {}
			}

			UTIL.log(true);
			return;
		}



		// 新增或修改文件，只处理单文件，不处理文件夹
		if (!FS.statSync(path).isFile()) {
			return;
		}


		// =========================================================================
		// 新增与编辑的处理流程
		// 
		// 
		// step 1: 更新文件列表的最后修改时间，确保不是由chokidar开启监听时产生的变更
		STEP1 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-record/task.js'));
		ret = STEP1({
			files: [{
				src: path
			}]
		}, {
			// 参数对应的是flow-record提供的需要处理的配置参数，参看flow-record/lib/all.js
			output: PATH.join(CWD, '_bjs_/mtime.json'),
			src: path,
			dest: PATH.join(dest, PATH.relative(CWD, path))
		});


		// 如果文件无变更，则不做任何操作
		if (!ret) {
			return;
		}

		// log
		UTIL.log();
		// step 2: copy
		if (!(conf.smarty && /\.tpl$/.test(path))) { // 除去tpl的copy
			STEP2 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-copy/task.js'));
			ret = STEP2({
				files: [{
					expand: true,
					cwd: CWD,
					src: PATH.relative(CWD, path),
					dest: dest
				}]
			});
		}

		// 如果文件处于锁状态，是无法读取copy的，此时暂时退出
		if (!ret) {
			UTIL.log(true);
			return;
		};


		// 针对第三方库文件，选择性不做后续编译
		if ((typeof conf.ignore === 'object' && conf.ignore.test(path.replace(/\\|\\\\/g, '/'))) || (typeof conf.ignore === 'string' && path.replace(/\\|\\\\/g, '/').indexOf(PATH.join(CWD, conf.ignore).replace(/\\|\\\\/g, '/'))) > -1) {
			UTIL.log(true);
			return;
		}


		// step 3: plugins actions
		var file;
		if (conf.plugins && conf.plugins.length > 0) {
			conf.plugins.forEach(function(item) {
				STEP3 = require(PATH.join(__dirname, 'bjs-cmd-command/plugins', item.lib));
				if (item.pattern.test(path)) {
					file = {
						expand: true,
						cwd: _cwd,
						src: PATH.relative(_cwd, path),
						dest: _dst
					};
					STEP3({
						files: [file]
					}, item.options ? (typeof item.options === 'function' ? item.options(file) : item.options) : {});
				}
			});
		}


		// step 4: filter
		if (conf.smarty && /\.tpl$/.test(path)) {
			STEP4 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-filter/task.js'));
			STEP4({
				files: [{
					expand: true,
					cwd: _cwd,
					src: PATH.relative(_cwd, path),
					dest: PATH.join(CWD, conf.view)
				}]
			}, {
				pattern: /view\/[^\/]*\.tpl/,
				dest: PATH.join(CWD, conf.view)
			})
		}


		// step 5: css import, from dest to dest 
		if (conf.cssImport && /\.css$/.test(path)) {
			STEP5 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-import/task.js'));
			ret = STEP5({
				files: [{
					expand: true,
					cwd: CWD,
					src: PATH.relative(CWD, path),
					dest: dest
				}]
			}, {
				output: PATH.join(CWD, '_bjs_/css-deps.json'),
				dest: dest
			});

			// 针对cssImport影响到的深依赖文件进行二次合并压缩
			if (ret.length > 0) {
				var CMDConf = require(PATH.join(__dirname, 'bjs-cmd-command/cmd.conf.js'))(PATH.join(CWD, conf.conf));
				ret.forEach(function(f) {
					// transport
					require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-transport/task.js'))({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, f),
							dest: _dst
						}]
					}, {
						alias: CMDConf.seajs.alias, // TODO
						base: _dst
					}, {
						'.js': 1,
						'.css': 1
					});
					// minify
					conf.cssMinify ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-minify/task.js'))({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, f),
							dest: _dst
						}]
					}) : null;
					// uglify
					conf.uglify ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-uglify/task.js'))({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, f + '.js'),
							dest: _dst
						}]
					}, {
						base: _dst,
						ignore: CMDConf.seajs.ignore
					}) : null;
					// with version
					conf.version ? require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'))({
						files: [{
							expand: true,
							cwd: dest,
							src: PATH.relative(CWD, f),
							dest: dest
						}]
					}, {
						base: dest,
						view: PATH.join(CWD, conf.view),
						ignore: CMDConf.seajs.ignore
					}) : null;
				});
			}
		}


		// step 6: tansport
		var CMDConf = require(PATH.join(__dirname, 'bjs-cmd-command/cmd.conf.js'))(PATH.join(CWD, conf.conf));
		if (/\.(js|css)$/.test(path)) {
			STEP6 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-transport/task.js'));
			STEP6({
				files: [{
					expand: true,
					cwd: _dst,
					src: PATH.relative(_cwd, path),
					dest: _dst
				}]
			}, {
				alias: CMDConf.seajs.alias, // TODO
				base: _dst
			}, {
				'.js': 1,
				'.css': 1
			})
		}


		// step 7: css minify, from dest to dest 
		if (conf.cssMinify && /\.css$/.test(path)) {
			STEP7 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-css-minify/task.js'));
			STEP7({
				files: [{
					expand: true,
					cwd: _dst,
					src: PATH.relative(_cwd, path),
					dest: _dst
				}]
			})
		}


		// step 8: uglify
		if (conf.uglify && /\.(js|css)$/.test(path)) {
			STEP8_1 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-deps/task.js'));
			// 先查找深依赖
			var list = STEP8_1({
				files: [{
					expand: true,
					cwd: _dst,
					src: PATH.relative(_cwd, (/\.css/.test(path) ? path + '.js' : path)),
					dest: _dst
				}]
			}, {
				output: PATH.join(CWD, '_bjs_/js-map.json'),
				base: _dst,
				dest: _dst,
				ignore: CMDConf.seajs.ignore // TODO
			});
			// 再根据深依赖影响的模块一一处理 
			if (list && list.length > 0) {
				STEP8_2 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-cmd-uglify/task.js'));
				list.forEach(function(file) {
					STEP8_2({
						files: [{
							expand: true,
							cwd: _dst,
							src: PATH.relative(_dst, file),
							dest: _dst
						}]
					}, {
						base: _dst,
						ignore: CMDConf.seajs.ignore
					});
				})
			}
		}


		// step 9: version
		if (conf.version) {
			// 记录
			var record, recordPath = PATH.join(CWD, '_bjs_/version-map.json');
			if (FS.existsSync(recordPath)) {
				record = require(recordPath);
			} else {
				record = {};
			}
			var mtime = FS.statSync(path).mtime.getTime();
			var _file = path.replace(/\\|\\\\/g, '/');
			record[_file] = mtime;

			// 执行
			STEP9 = require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'));
			STEP9({
				files: [{
					expand: true,
					cwd: dest,
					src: PATH.relative(CWD, path),
					dest: dest
				}]
			}, {
				base: dest,
				view: PATH.join(CWD, conf.view)
			});
			// 回写
			FS.writeFileSync(recordPath, JSONNICE(record), 'utf8');
		}


		UTIL.log(true);
		// console.log('[File]: '.green + path.replace(/\\|\\\\/g, '/'));

	}, /[\/\\]\.|(bjs\.conf\.js)|_bjs_/);
}



/**
 * [watchInotify description]
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 */
function watchInotify(conf) {

}




/**
 * /
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 *
 * @description
 * 对整个项目进行版本更新，具体到有变动的文件
 */
function buildjsWithVersion(conf) {
	UTIL.log();

	// var record, recordPath = PATH.join(CWD, '_bjs_/version-map.json');
	var dest = PATH.join(CWD, conf.dest);
	var func = require(PATH.join(__dirname, 'bjs-cmd-command/flow-version/task.js'));
	var ignore = typeof conf.ignore === 'object' ? conf.ignore : PATH.join(CWD, conf.dest, conf.ignore).replace(/\\|\\\\/g, '/');

	// if (FS.existsSync(recordPath)) {
	// 	record = require(recordPath);
	// } else {
	// 	record = {};
	// }

	dispose(dest);
	conf.view ? dispose(PATH.join(CWD, conf.view)) : null;

	// 回写记录文件
	// FS.writeFileSync(recordPath, JSONNICE(record), 'utf8');

	UTIL.log(true);

	/**
	 * /
	 * @param  {[type]} path [description]
	 * @return {[type]}      [description]
	 */
	function dispose(path) {
		if (FS.existsSync(path)) {
			var ll = FS.readdirSync(path);
			ll.forEach(function(file) {
				var _file = PATH.join(path, file).replace(/\\|\\\\/g, '/');
				if (FS.statSync(_file).isDirectory()) {
					dispose(_file);
				} else {
					// 针对第三方库文件，选择性不做后续编译
					if ((typeof ignore === 'object' && ignore.test(_file)) ||
						(typeof ignore === 'string' && _file.indexOf(ignore) > -1)) {
						return;
					}
					// 判断是否存在记录中，存在的话对比最后修改时间
					// var mtime = FS.statSync(_file).mtime.getTime();
					// if (_file in record && record[_file] === mtime || /@v/.test(_file)) {
					// 	return;
					// }
					// record[_file] = mtime;
					// 单文件执行
					func({
						files: [{
							expand: true,
							cwd: dest,
							src: PATH.relative(dest, _file),
							dest: dest
						}]
					}, {
						base: dest,
						view: PATH.join(CWD, conf.view)
					});
				}
			})
		}
	}
}



function clearVersion(conf){
	var dest = PATH.join(CWD, conf.dest);
	inner(dest);

	function inner(path){
		if(!FS.existsSync(path)){
			return;
		}

		var ll = FS.readdirSync(path);
	}
}




module.exports = {
	watchChokidar: watchChokidar,
	watchInotify: watchInotify,
	buildjsWithVersion: buildjsWithVersion
}