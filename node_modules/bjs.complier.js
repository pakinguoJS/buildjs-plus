/**
 *
 *
 */

'use strict';

var PATH = require('path');
var FS = require('fs');
var CWD = process.cwd();

var watcher = require(PATH.join(__dirname, 'bjs-watch/lib/watch.js'));


/**
 *
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 */
function watchChokidar(conf) {
	// 需要忽略几种类型的文件：
	// 1、以.开头的隐藏文件
	// 2、bjs.conf.js文件
	// 3、bjs项目记录的相关文件夹 _bjs_
	watcher.watchA(CWD, function(type, path) {

		// 先将路径配置为grunt.file接收的数据格式
		var dest = PATH.join(CWD, conf.dest);

		// step 1: 更新文件列表的最后修改时间，确保不是由chokidar开启监听时产生的变更
		var mtimeFile = PATH.join(CWD, '_bjs_/mtime.json');
		var STEP1 = require(PATH.join(__dirname, 'bjs-command/flow-record/task.js'));
		var ret = STEP1({
			files: [{
				src: path
			}]
		}, {
			output: mtimeFile
		});


		// 如果文件无变更，则不做任何操作
		if (!ret) {
			return;
		}


		// step 2: copy
		if(!FS.statSync(path).isFile()){
			return;
		}
		var STEP2 = require(PATH.join(__dirname, 'bjs-command/flow-copy/task.js'));
		STEP2({
			files: [{
				expand: true,
				cwd: CWD,
				src: PATH.relative(CWD, path),
				dest: dest
			}]
		});


	}, /[\/\\]\.|(bjs\.conf\.js)|_bjs_/);
}



/**
 * [watchInotify description]
 * @param  {[type]} conf [description]
 * @return {[type]}      [description]
 */
function watchInotify(conf) {

}



module.exports = {
	watchChokidar: watchChokidar,
	watchInotify: watchInotify
}