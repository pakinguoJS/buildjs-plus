{
  "name": "css-sprite",
  "version": "0.9.0",
  "description": "css sprite generator",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/aslansky/css-sprite.git"
  },
  "homepage": "https://github.com/aslansky/css-sprite",
  "bugs": {
    "url": "https://github.com/aslansky/css-sprite/issues"
  },
  "author": {
    "name": "Alexander Slansky",
    "email": "alexander@slansky.net",
    "url": "http://slansky.net"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "bin": {
    "css-sprite": "./bin/cli.js"
  },
  "scripts": {
    "test": "mocha --reporter spec",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "coverage": "istanbul cover _mocha --report html -- -R spec",
    "hint": "jshint lib/**/*.js index.js",
    "style": "jscs test/*.js lib/**/*.js index.js"
  },
  "main": "./index.js",
  "keywords": [
    "sprites",
    "sprite",
    "coordinates",
    "css",
    "scss",
    "less",
    "sass",
    "stylus",
    "gulpfriendly",
    "gruntplugin"
  ],
  "dependencies": {
    "async": "^0.9.0",
    "color": "^0.7.3",
    "cssesc": "^0.1.0",
    "gaze": "^0.6.4",
    "graceful-fs": "^3.0.4",
    "imageinfo": "^1.0.4",
    "json2css": "^5.2.1",
    "layout": "~2.0.0",
    "lodash": "^2.4.1",
    "lwip": "0.0.5",
    "mkdirp": "^0.5.0",
    "mustache": "^0.8.2",
    "nomnom": "^1.8.1",
    "through2": "^0.6.3",
    "vinyl": "^0.4.5",
    "vinyl-fs": "0.3.13"
  },
  "devDependencies": {
    "mocha": "^2.0.1",
    "mocha-lcov-reporter": "^0.0.1",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.2",
    "should": "^4.3.0",
    "stylus": "^0.49.3",
    "node-sass": "^0.9.6",
    "less": "^2.0.0",
    "clean-css": "^2.2.17",
    "grunt": "^0.4.5"
  },
  "readme": "# css-sprite\n\n[![NPM version](https://badge.fury.io/js/css-sprite.svg)](http://badge.fury.io/js/css-sprite) [![Build Status](https://travis-ci.org/aslansky/css-sprite.svg?branch=master)](https://travis-ci.org/aslansky/css-sprite) [![Coverage Status](https://img.shields.io/coveralls/aslansky/css-sprite.svg)](https://coveralls.io/r/aslansky/css-sprite) [![Code Climate](https://codeclimate.com/github/aslansky/css-sprite/badges/gpa.svg)](https://codeclimate.com/github/aslansky/css-sprite) [![Dependencies](https://david-dm.org/aslansky/css-sprite.svg)](https://david-dm.org/aslansky/css-sprite)\n\n> A css sprite generator.\n\n> Generates sprites and proper css files out of a directory of images.\n\n> Supports retina sprites.\n\n> Can inline base64 encoded sprites.\n\n## Requirements\n\nStarting with version 0.9 `css-sprite` has no external dependencies\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/css-sprite)\n\n```\nnpm install css-sprite --save\n```\n\nIf you want to use `css-sprite` on your cli install with:\n\n```\nnpm install css-sprite -g\n```\n\n## Command Line Interface\n\n```sh\nUsage: css-sprite <out> <src>... [options]\n\nout     path of directory to write sprite file to\nsrc     glob strings to find source images to put into the sprite\n\nOptions:\n   -b, --base64           create css with base64 encoded sprite (css file will be written to <out>)\n   -c, --css-image-path   http path to images on the web server (relative to css path or absolute path)  [../images]\n   -f, --format           output format of the sprite (png or jpg)  [png]\n   -n, --name             name of sprite file without file extension   [sprite]\n   -p, --processor        output format of the css. one of css, less, sass, scss or stylus  [css]\n   -t, --template         output template file, overrides processor option\n   -r, --retina           generate both retina and standard sprites. src images have to be in retina resolution\n   -s, --style            file to write css to, if omitted no css is written\n   -w, --watch            continuously create sprite\n   --background           background color of the sprite in hex  [#FFFFFF]\n   --margin               margin in px between tiles  [5]\n   --opacity              background opacity of the sprite. defaults to 0 when png or 100 when jpg  [0]\n   --orientation          orientation of the sprite image (vertical|horizontal|binary-tree)  [vertical]\n   --prefix               prefix for the class name used in css (without .)\n```\n\n## Programatic usage\n```\nvar sprite = require('css-sprite');\nsprite.create(options, cb);\n```\n\n### Options\n* **src:** Array or string of globs to find source images to put into the sprite.  [required]\n* **out:** path of directory to write sprite file to  [process.cwd()]\n* **base64:** when true instead of creating a sprite writes base64 encoded images to css (css file will be written to `<out>`)\n* **cssPath:** http path to images on the web server (relative to css path or absolute)  [../images]\n* **format** format of the generated sprite (png or jpg). By default uses png.\n* **name:** name of the sprite file without file extension  [sprite]\n* **processor:** output format of the css. one of css, less, sass, scss or stylus  [css]\n* **template:** output template file, overrides processor option (must be a [mustache](http://mustache.github.io/) template)\n* **retina:** generate both retina and standard sprites. src images have to be in retina resolution\n* **background** background color of the sprite in hex. Defaults to #FFFFFF\n* **style:** file to write css to, if omitted no css is written\n* **margin:** margin in px between tiles  [5]\n* **opacity** background opacity of the sprite between 0 and 100. Defaults to 0 when png or 100 when jpg\n* **orientation:** orientation of the sprite image (vertical|horizontal|binary-tree) [vertical]\n* **prefix:** prefix for the class name used in css (without .) [icon]\n\n\n### Example\n```js\nvar sprite = require('css-sprite');\nsprite.create({\n  src: ['./src/img/*.png'],\n  out: './dist/img'\n  name: 'sprites',\n  style: './dist/scss/_sprites.scss',\n  cssPath: '../img',\n  processor: 'scss'\n}, function () {\n  console.log('done');\n});\n```\n\n## Usage with [Gulp](http://gulpjs.com)\n```js\nvar gulp = require('gulp');\nvar gulpif = require('gulp-if');\nvar sprite = require('css-sprite').stream;\n\n// generate sprite.png and _sprite.scss\ngulp.task('sprites', function () {\n  return gulp.src('./src/img/*.png')\n    .pipe(sprite({\n      name: 'sprite',\n      style: '_sprite.scss',\n      cssPath: './img',\n      processor: 'scss'\n    }))\n    .pipe(gulpif('*.png', gulp.dest('./dist/img/'), gulp.dest('./dist/scss/')))\n});\n// generate scss with base64 encoded images\ngulp.task('base64', function () {\n  return gulp.src('./src/img/*.png')\n    .pipe(sprite({\n      base64: true,\n      style: '_base64.scss',\n      processor: 'scss'\n    }))\n    .pipe(gulp.dest('./dist/scss/'));\n});\n```\n\nOptions to use `css-sprite` with [Gulp](http://gulpjs.com) are the same as for the `sprite.create` function with the exception of `src` and `out`.\n\n## Usage with [Grunt](http://gruntjs.com)\n\nAdd `css-sprite` as a dependency to your grunt project and then use something like this in your `gruntfile.js`:\n\n```js\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    css_sprite: {\n      options: {\n        'cssPath': '../images',\n        'processor': 'css',\n        'orientation': 'vertical',\n        'margin': 5\n      },\n      sprite: {\n        options: {\n          'style': 'dest/css/sprite.css'\n        },\n        src: ['src/images/*', 'src/images2/*'],\n        dest: 'dest/images/sprite.png',\n      },\n      base64: {\n        options: {\n          'base64': true\n        },\n        src: ['src/images/*'],\n        dest: 'dest/scss/base64.css',\n      }\n    }\n  });\n\n  // Load the plugin that provides the \"css-sprite\" task.\n  grunt.loadNpmTasks('css-sprite');\n\n  // Default task(s).\n  grunt.registerTask('default', ['css_sprite']);\n};\n```\n\nOptions to use `css-sprite` with [Grunt](http://gruntjs.com) are the same as for the `sprite.create` function with the exception of `src` and `out`.\n\n\n## Usage with [sass](http://sass-lang.com/) / [less](http://lesscss.org/) / [stylus](http://learnboost.github.io/stylus/)\n\n#### [scss](http://sass-lang.com/) example\n\n```scss\n@import 'sprite'; // the generated style file (sprite.scss)\n\n// camera icon (camera.png in src directory)\n.icon-camera {\n  @include sprite($camera);\n}\n\n// cart icon (cart.png in src directory)\n.icon-cart {\n  @include sprite($cart);\n}\n```\n\n#### [sass](http://sass-lang.com/) example\n\n```sass\n@import 'sprite' // the generated style file (sprite.sass)\n\n// camera icon (camera.png in src directory)\n.icon-camera\n  +sprite($camera)\n\n// cart icon (cart.png in src directory)  \n.icon-cart\n  +sprite($cart)\n```\n\n#### [less](http://lesscss.org/) example\n\n```less\n@import 'sprite'; // the generated style file (sprite.less)\n\n// camera icon (camera.png in src directory)\n.icon-camera {\n  .sprite(@camera);\n}\n\n// cart icon (cart.png in src directory)\n.icon-cart {\n  .sprite(@cart);\n}\n```\n\n#### [stylus](http://learnboost.github.io/stylus/) example\n\n```stylus\n@import 'sprite' // the generated style file (sprite.styl)\n\n// camera icon (camera.png in src directory)\n.icon-camera\n  sprite($camera)\n\n// cart icon (cart.png in src directory)\n.icon-cart\n  sprite($cart)\n```\n",
  "readmeFilename": "readme.md",
  "_id": "css-sprite@0.9.0",
  "_from": "css-sprite@"
}
